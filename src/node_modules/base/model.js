var config = require('uiconfig');
var Base = require('ampersand-model');
var debug = require('debug')("craftodex:base:model");
var urlRe = require('url-regex')({ exact: true });

var registry = require('registry');

module.exports = Base.extend({

  typeAttribute: "modelType",
  idAttribute: "@id",
  namespaceAttribute: "@graph",

  extraProperties: 'ignore',

  initialize: function () {
    debug("adding", this.getId(), "to registry");
    registry.set(this.getId(), this);
    this.on('destroy', function() {
      debug("deleting", this.getId(), "from registry");
      registry['delete'](this.getId());
    }, this);
    this.on('change:@id', function (oldId, newId) {
      var oldId = this.previousAttributes()['@id'];
      var newId = this.attributes['@id'];
      debug("moving", oldId, "to", newId);
      registry['delete'](oldId);
      registry.set(newId, this);
    });
  },

  props: {
    "@id": "string",
    "@type": "string",
    "@context": "object",
  },

  dataTypes: {
    link: {
      set: function (newVal) {
        debug("dataTypes.link.set", newVal);
        var isInstance = newVal instanceof Base || (newVal && newVal.isState);
        if (isInstance) {
          newVal = newVal.getId();
        }
        var isUrl = urlRe.test(newVal);
        return {
          val: newVal,
          type: isUrl ? 'link' : typeof newVal,
        };
      },
      get: function (val) {
        debug("dataTypes.link.get(", val, ")");
        var ret = registry.get(val);
        debug("dataTypes.link.get() ->", ret);
        return ret;
      },
      compare: function (currentVal, newVal, attributeName) {
        debug("dataTypes.link.compare", currentVal, newVal, attributeName);
        return currentVal === newVal;
      },
    },
  },

  derived: {
    id: {
      deps: ["@id"],
      fn: function () {
        var id = this.getId();
        var api = config.api;

        if (!id) {
          return null;
        }

        var subId = id.substring(0, api.length);
        if (id.substring(0, api.length) === api) {
          return id.substring(api.length);
        } else {
          return id;
        }
      },
    },
  },

  url: function () {
    var id = this.getId();
    var api = config.api;

    var url = null;
    if (urlRe.test(id)) {
      url = id;
    } else if (id) {
      url = api + "/" + id
      ;
    }

    debug("url() ->", url, this);
    return url;
  },
});
