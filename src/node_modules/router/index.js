var config = require('uiconfig');
var extend = require('xtend');
var Path = require('path');
var Url = require('url');
var pathMatch = require('path-match')();
var reverend = require('reverend');
var querystring = require('querystring');
var debug = require('debug')("router");

function Router (config) {
  this.config = config;

  if (process.browser) {
    var Location = require('observ-location');
    this.location = Location(config);
  }

  this.match = ":collection/:id?/:relation?";
  this.pathToRoute = pathMatch(this.match);
  this.routeToPath = function (route) {
    return reverend(this.match, route)
  };
}

Router.prototype.route = function (path, callback) {
  debug("route", path, callback);

  if (typeof callback === 'undefined') {
    callback = path;
    path = null;
  }

  if (path) {
    return callback(this.parse(path));
  } else {
    return this.location(function (href) {
      var path = Url.parse(href).path;
      return callback(this.parse(path));
    }.bind(this));
  }
}

Router.prototype.parse = function (path) {
  path = path || "";

  debug("parse(", path, ")");

  // split path into pathname and search
  var pathSplit = path.split('?');
  var pathname = pathSplit[0] || "/";
  var search = pathSplit[1] || "";

  // remove prefix from pathname
  pathname = pathname.replace(this.config.prefix || "/", "");
  
  // parse path into route
  var route = this.pathToRoute(pathname);

  // default / to to /groups/0
  if (pathname === "") {
    route = {
      collection: "groups",
      id: "enspiral-craftworks",
    }
  }
  
  // parse search into query
  route.query = querystring.parse(search);

  debug("route() ->", route);
  return route;
}

var strip = function (re) {
  return function (path) {
    return path.replace(re, '');
  };
};
var stripTrailingSlashes = strip(/\/$/g);
var stripSlashes = strip(/^\//g);

Router.prototype.format = function (route) {
  route = route || {};

  debug("format(", route, ")");

  // id may contain other parts
  if (route.id) {
    var idSplit = stripSlashes(route.id).split('/');
    debug("idSplit", idSplit);
    if (idSplit.length > 1 || idSplit.length <= 3) {
      route = {
        collection: idSplit[0],
        id: idSplit[1],
        relation: idSplit[2],
      };
      debug("reformat", route);
    }
  }

  // format route into pathname
  var pathname = this.routeToPath(route);

  // strip trailing slashes
  pathname = stripTrailingSlashes(pathname);

  // add prefix to path
  pathname = Path.join(this.config.pathname || "/", pathname);

  var path;
  if (route.query) {
    // parse query into search
    var search = querystring.stringify(route.query || {});

    // join pathname and search into path
    path = pathname + "?" + search
  } else {
    path = pathname;
  }

  debug("format() ->", path);
  return path;
}

module.exports = new Router(config);
