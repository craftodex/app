//takes node and edge data and out node and edge svgs
//main
var React               = require('react');

//libraries and components
var Cola                = require('graph-view/webcola-adaptor')();
var Node                = require('graph-view/node-ui');
var Edge                = require('graph-view/edge-ui');
var Graph               = require('graph-view/graph');
var RelationshipButton  = require('graph-view/relationship-button');
var config              = require('uiconfig');
// var pallete            = require('uiconfig/pallete').paleBackgroundPrimary;
var pallete             = [
    '#d04437',
    '#205081',
    '#f6c342',
    '#3572b0',
    '#14892c',
    '#333333',
    '#707070'
]

//helpers
var makeLinks           = require('graph-view/make-links');
var _                   = require('lodash');
var h                   = require('create-element');
var xtend               = require('xtend');

//debug
var debug     = require('debug')("graph-view");

//hardcoded label verbs
var labelMap = {
  steward: 'stewards',
  stewardee: 'stewarded by',
  group: 'member'
}

module.exports = React.createClass({
  getInitialState: function (options) {
    return {
      prefix: config.api + "/relationshipTypes/",
      relationshipObj: {},
      svgRect: {
        top: null,
        left: null
      },
      palleteMap: {}
    }
  },

  render: function () {
    debug('rendering', { props: this.props , state: this.state })
    var relationshipObj = this.state.relationshipObj;

    var predicates = Object.keys(relationshipObj).map(function (rel) {
      var label = rel.split('/').pop();
      return { 
        active: relationshipObj[rel], 
        relationshipId: rel, 
        label: labelMap[label] 
      };
    });

    return(
      React.createElement("div", { id: 'graph-view' }, 
        React.createElement('div', { id: 'relationship-filters' },
          predicates.map(function (pred, i) {
            return React.createElement(
              RelationshipButton, 
              { 
                active: relationshipObj[pred.relationshipId],
                prefix: this.state.prefix,
                ref: 'filter-' + (i+1),
                datum: pred, 
                toggleRelationship: this.toggleRelationship,
                color: this.state.palleteMap[pred.relationshipId]
              }
            )
          }.bind(this))
        ),
        React.createElement(
          Graph, 
          { 
            svgRect: this.state.svgRect,
            predicates: predicates, 
            model: this.props.model, 
            actions: this.props.actions,
            palleteMap: this.state.palleteMap
          }
        )
      )
    );
  },

  componentDidUpdate: function () {
    var model = this.props.model;
    var ref = model ? 'filter-' + (model.relatedTypes.length) : null;
    var svgRect;

    if (model && this.refs[ref] && !this.state.svgRect.top) {
      //check that all the filter buttons have been rendered and svgRect hasn't been set
      svgRect = this.getDOMNode()
        .querySelector('#graph-svg')
        .getBoundingClientRect();
      debug('rect', svgRect)
      this.setState({ svgRect: { top: svgRect.top,  left: svgRect.left } });
    }
  },

  componentWillReceiveProps: function (nextProps) {
    debug('componentWillReceiveProps', {nextProps: nextProps});
    var relatedTypes    = nextProps.model.relatedTypes;
    var relationshipObj = this.state.relationshipObj;
    var palleteMap      = this.state.palleteMap;
    var svgRect;
    
    var nextRelationshipObj = relatedTypes.reduce(function (acc, rel, i) { 
      //TODO only handles 7 colors with pale background
      palleteMap[rel] = pallete[i];
      debug('palleteMap', pallete, i)
      acc[rel] = (relationshipObj[rel]) ? true : false;
      return acc;
    }, {});

    debug('relatedTypes', relatedTypes, nextRelationshipObj)
    this.setState({ relationshipObj: nextRelationshipObj, palleteMap: palleteMap })

  },

  componentWillUpdate: function (nextProps, nextState) {
  },

  toggleRelationship: function (evt) {
    var relId = evt.target.getAttribute("data-relationshipid");
    var relationshipObj = this.state.relationshipObj;
    relationshipObj[relId] = !relationshipObj[relId];
    this.setState({relationshipObj: relationshipObj });
  }
})

