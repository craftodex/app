var React 	= require('react');
var _ = require('lodash');
var traverse = require('traverse');
var debug = require('debug')("graph-view");
//takes node and edge data and out node and edge svgs

var h = require('create-element');

var info = require('debug')("graph-view - info");

var Cola = require('graph-view/webcola-adaptor')();
var Node 		= require('graph-view/node-ui');
var Edge 		= require('graph-view/edge-ui');

module.exports = React.createClass({

	getInitialState: function (options) {
		var predicates = this.props.predicates || []; //
		var	entities = this.props.entities;
		var edges = [];

		entities.forEach(function (entity, i) { entity.index = i });

		//compute links
		var makeEdge = function (subj, pred, obj) {
			return {
				source: subj.index,
				target: obj.index,
				type: pred,
				id: subj.id + '-' + pred + '-' + obj.id
			};
		};

		for (var i=0;i<entities.length;i++) {
			var entity = entities[i];
			for(var j=0;j<predicates.length;j++) {
				var predicate = predicates[j];
				var object = entity[predicate];
				if(typeof object !== 'undefined' && object !== null) {
					if (typeof object === 'object') {
						traverse(object).forEach(function (x) {
							if (typeof x === 'number' || typeof x === 'string') {
								var target = _.find(entities, { id: x });
								if (target) edges.push(makeEdge(entity, predicate, target, entities));									
							}
						})
					} else {
						var target = _.find(entities, { id: object });
						if (target) edges.push(makeEdge(entity, predicate, target, entities));
					}
				}
			}
		}

		var width 	= 700,
				height 	= 700;

		var cola = Cola
			.size([width, height])
			.avoidOverlaps(true)
			.linkDistance(70)
			.nodes(entities)
			.links(edges)

		return {
			width: width,
			height: height,
			cola: cola,
			nodes: cola.nodes(),
			rect: {
				top: null,
				left: null				
			}
		}
	},

	render: function () {
		var nodes = this.state.nodes;
		var edges = this.state.cola.links();
		var actions = this.props.actions;

		return(
			React.createElement("div", null, 
				React.createElement('div', { className: 'node-group' },
					this.state.rect.top 
						? nodes.map(function (node) {
							return React.createElement(Node, { datum: node, actions: actions, key: node.id, rect: this.state.rect })
							}.bind(this))
						: null
				),
				React.createElement("svg", 
					{
						id: 'graph-view-svg',
						width: this.state.width, 
						height: this.state.height 
					}, 
					React.createElement("defs"),
					// React.createElement("g", {className: "node-group"}, 
					// 	nodes.map(function (node) {
					// 		return React.createElement(Node, { datum: node, actions: actions, key: node.id })
					// 	})
					// ), 
					React.createElement("g", {className: "edge-group"}, 
						edges.map(function (edge) {
							return React.createElement(Edge, { datum: edge, actions: actions, key: edge.id })
						})
					)
				)
			)
		);
	},

	componentDidMount: function () {
		var DOMNode = this.getDOMNode();
		var rect = DOMNode.getBoundingClientRect();
		var defs = DOMNode.getElementsByTagName('defs')[0];
		var marker = h('marker', 
			{ 
				id: 'arrowhead',
        viewBox:"0 0 10 10", 
        refX:"1", refY:"5",
        markerWidth:"6", 
        markerHeight:"6",
        orient:"auto"
			},
			h('path', { d: "M 0 0 L 10 5 L 0 10 z", fill: 'grey' })
		);

		//tick listener triggers setState, triggers re-render
		this.state.cola.on('tick', function () {
			this.setState({ nodes: this.state.cola.nodes() })
		}.bind(this));

		//trigger force graph
		this.state.cola.start();

		// find the svg coordinates in relation to the window
		this.setState({ rect: { top: rect.top, 	left: rect.left } });

		//insert our arrowhead marker 'cos React doesn't support it? :(
		defs.insertAdjacentHTML('beforeend', marker)
	},


	shouldComponentUpdate: function (nextProps, nextState) {
		//TODO use immutable.js
		//Test if new data recieved, if true rerender
		// if (nextProps.nodes === this.props.nodes 
		// 		|| nextProps.edges === this.props.edges) return false;
		// else return true;
		return true;
	},

	componentWillUpdate: function (nextProps, nextState) {




	}





})

